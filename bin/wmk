#!/bin/bash

# Assumes that this script is in bin/ inside the wmk repository and that the
# python virtual environment is in $wmk_home/venv

SCRIPT_PATH=$(realpath "$0")
SCRIPT_HOME=$(dirname "$SCRIPT_PATH")
WMK_HOME=$(dirname "$SCRIPT_HOME")
INOTIFYWAIT="$(which inotifywait)"
FSWATCH="$(which fswatch)"
ACTION="$1"
BASEDIR="$2"
QUICK=""
SERVEPORT=""
SERVEIP=""
CACHE_FILE="$BASEDIR/tmp/wmk_render_cache.$(id -u).db"
if [ "$WMK_CONFIG" = "" ]; then
    WMK_CONF_PATH="$BASEDIR/wmk_config.yaml"
    WMK_CONFIG=wmk_config.yaml
else
    WMK_CONF_PATH="$BASEDIR/$WMK_CONFIG"
fi

. "$WMK_HOME/venv/bin/activate"


if [ "$ACTION" = "--version" ]; then
    "$WMK_HOME/wmk.py" "--version"
    exit
fi

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -p|--port)
            SERVEPORT="$2"
            shift; shift
            ;;
        -i|--ip)
            SERVEIP="$2"
            shift; shift
            ;;
        -q|--quick)
            QUICK=--quick
            shift
            ;;
        -f|--force)
            echo "NOTE: -f|--force is no longer needed. Switch ignored."
            shift
            ;;
        *)
            shift
            ;;
    esac
done

wmk_conf(){
    if test -s "$WMK_CONF_PATH"
    then
        python3 -c \
            "import yaml;c=yaml.safe_load(open('$WMK_CONF_PATH'));print(c.get('$1','$2'));"
    else
        echo "$2"
    fi
}

wmk_http_conf(){
    if test -s "$WMK_CONF_PATH"
    then
        python3 -c \
            "import yaml;c=yaml.safe_load(open('$WMK_CONF_PATH'));print(c.get('http',{}).get('$1','$2'));"
    else
        echo "$2"
    fi
}

usage(){
    echo "wmk - a static site builder"
    echo "Usage:"
    echo "  wmk build|watch <dirname> [-q|--quick]"
    echo "  wmk serve <dirname> [-p|--port <portnum>] [-i|--ip <ip-addr>]"
    echo "  wmk watch-serve <dirname> [-p|--port <portnum>] [-i|--ip <ip-addr>]"
    echo "  wmk info|env|debug <dirname>"
    echo "  wmk clear-cache <dirname>"
    echo "Action abbreviations: "
    echo "  b|r|run=build; w=watch; s=serve; ws=watch-serve; c=clear-cache"
    echo "See $WMK_HOME/readme.md for documentation"
}

clean_cache(){
    if [[ -e "$CACHE_FILE" ]]; then
        echo "Removing cache file ($CACHE_FILE)"
        rm -f "$CACHE_FILE"
    else
        echo "No cache file found"
    fi
}

init(){
    tpl_src="$WMK_HOME/init-files/templates"
    conf_src="$WMK_HOME/init-files/wmk_config.sample.yaml"
    status="none"
    copied=""
    if [ ! -d "$BASEDIR/content" ] || [ "$(ls -A ""$BASEDIR/content"")" = "" ]; then
        echo "$BASEDIR/content does not exist or is empty."
        echo "Please call wmk init again after you have some content."
        exit 1
    fi
    if [ -d "$BASEDIR/templates" ] && [ "$(ls -A ""$BASEDIR/templates"")" ]; then
        echo "WARNING: Not copying templates: directory not empty"
    else
        rsync -a "$tpl_src" "$BASEDIR/"
        status="ok"
        copied="$copied templates"
    fi
    if [ -e "$BASEDIR/wmk_config.yaml" ]; then
        echo "WARNING: Not copying wmk_config.yaml"
    else
        cp "$conf_src" "$BASEDIR/wmk_config.yaml"
        copied="$copied wmk_config"
    fi
    if [ "$status" == "ok" ]; then
        echo "DONE: $copied"
        echo "Now run wmk b ""$BASEDIR"""
    else
        echo "init: Nothing to do."
        echo "      You already appear ready to use wmk in $BASEDIR"
    fi
}

watch_and_serve(){
    if [ "$SERVEIP" == "" ]; then
        IP=$(wmk_http_conf ip 127.0.0.1)
    else
        IP=$SERVEIP
    fi
    if [ "$SERVEPORT" == "" ]; then
        PORT=$(wmk_http_conf port 7007)
    else
        PORT=$SERVEPORT
    fi
    (trap 'kill 0' SIGINT; "$0" s "$BASEDIR" -p "$PORT" -i "$IP" & "$0" w "$BASEDIR")
}

if test -d "$BASEDIR"
then
    case "$ACTION" in
        s|srv|serve)
            if [ "$SERVEIP" == "" ]; then
                IP=$(wmk_http_conf ip 127.0.0.1)
            else
                IP=$SERVEIP
            fi
            if [ "$SERVEPORT" == "" ]; then
                PORT=$(wmk_http_conf port 7007)
            else
                PORT=$SERVEPORT
            fi
            if [[ ! -e "$WMK_CONF_PATH" ]]; then
                echo "WARNING: $WMK_CONFIG not found!"
            fi
            outdir=$(wmk_conf output_directory htdocs)
            if [[ ! -e "$BASEDIR/$outdir" ]]; then
                echo "WARNING: no $(realpath "$BASEDIR")/$outdir found!"
            fi
            python3 -m http.server "$PORT" --bind "$IP" --directory "$BASEDIR/$outdir"
            ;;
        r|b|run|build)
            "$WMK_HOME/wmk.py" "$BASEDIR" "$QUICK"
            ;;
        w|watch)
            cd "$BASEDIR" || exit 1
            if [ "$INOTIFYWAIT" != "" ]; then
                while true; do
                    "$INOTIFYWAIT" \
                        -e modify -e attrib -e close_write -e create -e delete -e delete_self -r \
                        ./assets ./content ./templates ./data ./py ./static ./themes ./$WMK_CONFIG
                    "$WMK_HOME/wmk.py" "$BASEDIR"
                done
            elif [ "$FSWATCH" != "" ]; then
                (trap 'kill 0' SIGINT;  while true; do
                    "$FSWATCH" -1 -r \
                        --event Created --event Updated --event Removed \
                        --event AttributeModified \
                        --event MovedFrom --event MovedTo \
                        ./assets ./content ./templates ./data ./py ./static ./themes ./$WMK_CONFIG
                    "$WMK_HOME/wmk.py" "$BASEDIR"
                done)
            else
                echo "ERROR: Cannot watch without either inotifywait or fswatch" 1>&2
                exit 1
            fi
            ;;
        ws|watch-serve)
            watch_and_serve
            ;;
        debug|env|info)
            echo "WMK ENVIRONMENT:"
            echo "  - wmk home: $WMK_HOME"
            if [[ -e "$BASEDIR/wmk_config.yaml" ]]; then
                echo "  - project directory: $(realpath "$BASEDIR")"
            else
                echo "  - WARNING: $(realpath "$BASEDIR") has no wmk_config.yaml!"
            fi
            if [[ -e "$CACHE_FILE" ]]; then
                echo "  - cache file: $(realpath "$CACHE_FILE")"
            else
                echo "  - no cache file present"
            fi
            if [ "$INOTIFYWAIT" != "" ]; then
                echo "  - inotifywait used for watch functionality"
            elif [ "$FSWATCH" != "" ]; then
                echo "  - fswatch used for watch functionality"
            else
                echo "  - no watch functionality (need inotifywait or fswatch)"
            fi
            ;;
        c|cl|clean|clear|clean-cache|clear-cache)
            clean_cache
            ;;
        init)
            init "$BASEDIR"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
else
    usage
    exit 1
fi
